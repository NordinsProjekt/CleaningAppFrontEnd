// <auto-generated />
using System;
using CleaningApp.Infrastructure.UnitOfWork;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CleaningApp.Infrastructure.UnitOfWork.Migrations
{
    [DbContext(typeof(CleaningDBContext))]
    [Migration("20250222222031_TaskRenameToCleaningTaskEntity")]
    partial class TaskRenameToCleaningTaskEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CleaningApp.Domain.Entities.CleaningTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("TaskDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("TaskTypeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("TaskTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("CleaningApp.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec2bcf26-6118-4839-8ff8-99cf35b303b9"),
                            Name = "Vardagsrum"
                        },
                        new
                        {
                            Id = new Guid("d79adce3-b977-4b80-a9ed-9ef373b01a4b"),
                            Name = "Kök"
                        },
                        new
                        {
                            Id = new Guid("16d603e9-023e-4ece-9641-68ed340fba68"),
                            Name = "Badrum uppe"
                        },
                        new
                        {
                            Id = new Guid("28309c76-9ce7-4dd8-b1da-120c3e80be16"),
                            Name = "Badrum nere"
                        },
                        new
                        {
                            Id = new Guid("b6cc9e24-aad0-44dc-a4d0-a6c84975170e"),
                            Name = "Sovrum"
                        });
                });

            modelBuilder.Entity("CleaningApp.Domain.Entities.TaskTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<Guid?>("DefaultUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("char(36)");

                    b.Property<int>("TaskDuration")
                        .HasColumnType("int");

                    b.Property<Guid>("TaskTypeId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("DefaultUserId");

                    b.HasIndex("RoomId");

                    b.HasIndex("TaskTypeId");

                    b.ToTable("TaskTemplates");
                });

            modelBuilder.Entity("CleaningApp.Domain.Entities.TaskType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("TaskTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f7febf0e-ab94-4d71-91b3-f0ef302c49ae"),
                            Name = "Dammsugit golv"
                        },
                        new
                        {
                            Id = new Guid("065a20ba-6772-43f3-851b-848fc2ce39ee"),
                            Name = "Tvättat golv"
                        },
                        new
                        {
                            Id = new Guid("7147263a-f239-44eb-8a2a-235c3568dc39"),
                            Name = "Torkat av alla ytor"
                        },
                        new
                        {
                            Id = new Guid("619787c6-2057-429a-9429-ab91a9cb2283"),
                            Name = "Rengjort badrum"
                        },
                        new
                        {
                            Id = new Guid("f2a0c509-bc09-4c19-b1d8-e480163b0506"),
                            Name = "Bytt sängkläder"
                        },
                        new
                        {
                            Id = new Guid("a510494b-5c12-47f6-a55e-bcd589dc8d66"),
                            Name = "Tömt sopor"
                        },
                        new
                        {
                            Id = new Guid("6ffe1a46-3112-4245-959c-47cb51e50c2b"),
                            Name = "Tömt tvättmaskin"
                        },
                        new
                        {
                            Id = new Guid("b7b5270c-0f8d-4ccd-ac39-017bde938cc4"),
                            Name = "Startat tvättmaskin"
                        },
                        new
                        {
                            Id = new Guid("a2faa15b-a898-4176-a62c-bc49a7042077"),
                            Name = "Tömt diskmaskin"
                        },
                        new
                        {
                            Id = new Guid("b3292da5-ef07-4521-adc5-59f573b6c2b2"),
                            Name = "Startat diskmaskin"
                        });
                });

            modelBuilder.Entity("CleaningApp.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2744bda8-ca5b-4e08-abde-ae11562dded3"),
                            Name = "Markus"
                        },
                        new
                        {
                            Id = new Guid("3431b0a7-afa6-45e2-aa8d-13064ef08f5f"),
                            Name = "Cecilia"
                        },
                        new
                        {
                            Id = new Guid("52961fac-5431-4845-9b79-0c7bf88bf506"),
                            Name = "Planerad"
                        });
                });

            modelBuilder.Entity("CleaningApp.Domain.Entities.CleaningTask", b =>
                {
                    b.HasOne("CleaningApp.Domain.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleaningApp.Domain.Entities.TaskType", "TaskType")
                        .WithMany()
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleaningApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("TaskType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleaningApp.Domain.Entities.TaskTemplate", b =>
                {
                    b.HasOne("CleaningApp.Domain.Entities.User", "DefaultUser")
                        .WithMany()
                        .HasForeignKey("DefaultUserId");

                    b.HasOne("CleaningApp.Domain.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleaningApp.Domain.Entities.TaskType", "TaskType")
                        .WithMany()
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefaultUser");

                    b.Navigation("Room");

                    b.Navigation("TaskType");
                });
#pragma warning restore 612, 618
        }
    }
}
