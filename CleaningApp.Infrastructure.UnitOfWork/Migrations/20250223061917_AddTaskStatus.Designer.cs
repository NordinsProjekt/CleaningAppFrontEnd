// <auto-generated />
using System;
using CleaningApp.Infrastructure.UnitOfWork;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CleaningApp.Infrastructure.UnitOfWork.Migrations
{
    [DbContext(typeof(CleaningDBContext))]
    [Migration("20250223061917_AddTaskStatus")]
    partial class AddTaskStatus
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CleaningApp.Domain.Entities.CleaningTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TaskDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("TaskTypeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("TaskTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("CleaningApp.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("48cd1f9b-d5b0-463f-809f-d1bbea8ad32a"),
                            Name = "Vardagsrum"
                        },
                        new
                        {
                            Id = new Guid("4f254314-1bc2-435d-9b29-624a89fee683"),
                            Name = "Kök"
                        },
                        new
                        {
                            Id = new Guid("631082be-81d6-45ce-851f-a8dcf96593d9"),
                            Name = "Badrum uppe"
                        },
                        new
                        {
                            Id = new Guid("dad70fd7-60e0-46af-acf4-d9eeeecdca67"),
                            Name = "Badrum nere"
                        },
                        new
                        {
                            Id = new Guid("04a3f41c-ef09-42ca-aa8a-33eb73d588a1"),
                            Name = "Sovrum"
                        });
                });

            modelBuilder.Entity("CleaningApp.Domain.Entities.TaskTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<Guid?>("DefaultUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("char(36)");

                    b.Property<int>("TaskDuration")
                        .HasColumnType("int");

                    b.Property<Guid>("TaskTypeId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("DefaultUserId");

                    b.HasIndex("RoomId");

                    b.HasIndex("TaskTypeId");

                    b.ToTable("TaskTemplates");
                });

            modelBuilder.Entity("CleaningApp.Domain.Entities.TaskType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("TaskTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c2999c71-25b4-4fd5-9b47-11ad5c58d1cc"),
                            Name = "Dammsugit golv"
                        },
                        new
                        {
                            Id = new Guid("c155d51d-f6b6-40bd-bcbf-b1593a79a2e0"),
                            Name = "Tvättat golv"
                        },
                        new
                        {
                            Id = new Guid("216a50f1-f5bf-4dbe-bda9-5497464a9393"),
                            Name = "Torkat av alla ytor"
                        },
                        new
                        {
                            Id = new Guid("afdf8411-fa94-4b3b-b239-3e9ec397d454"),
                            Name = "Rengjort badrum"
                        },
                        new
                        {
                            Id = new Guid("987aec0a-f24c-4149-a2a4-8cecd90d3231"),
                            Name = "Bytt sängkläder"
                        },
                        new
                        {
                            Id = new Guid("7c1c6388-81b3-44d8-9e8b-db4235dc9c9e"),
                            Name = "Tömt sopor"
                        },
                        new
                        {
                            Id = new Guid("c3f79b26-ff10-4807-8a41-81e2374e34b1"),
                            Name = "Tömt tvättmaskin"
                        },
                        new
                        {
                            Id = new Guid("cfe17e50-caf4-4638-bcf7-3df365dd6396"),
                            Name = "Startat tvättmaskin"
                        },
                        new
                        {
                            Id = new Guid("52a2c583-f5cd-4e08-a103-b2833059258f"),
                            Name = "Tömt diskmaskin"
                        },
                        new
                        {
                            Id = new Guid("90b9d9e1-c695-4a9f-a2d8-905e301a8c57"),
                            Name = "Startat diskmaskin"
                        });
                });

            modelBuilder.Entity("CleaningApp.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("95fca50d-c790-4f47-ac33-09b98f31c590"),
                            Name = "Markus"
                        },
                        new
                        {
                            Id = new Guid("27714a73-fe87-4515-aad1-f5f19aedaca2"),
                            Name = "Cecilia"
                        },
                        new
                        {
                            Id = new Guid("fb9d54be-8417-49d3-abe0-212f55fba6a5"),
                            Name = "Planerad"
                        });
                });

            modelBuilder.Entity("CleaningApp.Domain.Entities.CleaningTask", b =>
                {
                    b.HasOne("CleaningApp.Domain.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleaningApp.Domain.Entities.TaskType", "TaskType")
                        .WithMany()
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleaningApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("TaskType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleaningApp.Domain.Entities.TaskTemplate", b =>
                {
                    b.HasOne("CleaningApp.Domain.Entities.User", "DefaultUser")
                        .WithMany()
                        .HasForeignKey("DefaultUserId");

                    b.HasOne("CleaningApp.Domain.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleaningApp.Domain.Entities.TaskType", "TaskType")
                        .WithMany()
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefaultUser");

                    b.Navigation("Room");

                    b.Navigation("TaskType");
                });
#pragma warning restore 612, 618
        }
    }
}
