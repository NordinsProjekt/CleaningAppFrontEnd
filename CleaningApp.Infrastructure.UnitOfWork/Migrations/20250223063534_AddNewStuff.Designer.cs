// <auto-generated />
using System;
using CleaningApp.Infrastructure.UnitOfWork;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CleaningApp.Infrastructure.UnitOfWork.Migrations
{
    [DbContext(typeof(CleaningDBContext))]
    [Migration("20250223063534_AddNewStuff")]
    partial class AddNewStuff
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CleaningApp.Domain.Entities.CleaningTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TaskDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("TaskTypeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("TaskTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("CleaningApp.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("83003226-c550-42ba-b2f1-a1ff2fd6dee2"),
                            Name = "Vardagsrum"
                        },
                        new
                        {
                            Id = new Guid("7a11bb98-3e4e-42c7-bccc-3dd3d564f995"),
                            Name = "Kök"
                        },
                        new
                        {
                            Id = new Guid("c5c2f4da-017a-4f95-b707-c40884d48823"),
                            Name = "Badrum uppe"
                        },
                        new
                        {
                            Id = new Guid("f3c3d903-b31a-480d-be93-c051a7ccc051"),
                            Name = "Badrum nere"
                        },
                        new
                        {
                            Id = new Guid("f52a0448-2d6e-4258-b6b9-e55b9cfccc94"),
                            Name = "Sovrum"
                        });
                });

            modelBuilder.Entity("CleaningApp.Domain.Entities.TaskTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int?>("DayOfMonth")
                        .HasColumnType("int");

                    b.Property<int?>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<Guid?>("DefaultUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("char(36)");

                    b.Property<int>("TaskDuration")
                        .HasColumnType("int");

                    b.Property<Guid>("TaskTypeId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("DefaultUserId");

                    b.HasIndex("RoomId");

                    b.HasIndex("TaskTypeId");

                    b.ToTable("TaskTemplates");
                });

            modelBuilder.Entity("CleaningApp.Domain.Entities.TaskType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("TaskTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3164d4ea-646d-4b7d-883b-bc0b57b77c93"),
                            Name = "Dammsugit golv"
                        },
                        new
                        {
                            Id = new Guid("2524e676-bca2-4d2c-abec-8df7668182f0"),
                            Name = "Tvättat golv"
                        },
                        new
                        {
                            Id = new Guid("b576d6fb-e1db-42b8-8703-afc12fc428ad"),
                            Name = "Torkat av alla ytor"
                        },
                        new
                        {
                            Id = new Guid("7113fe97-5d7d-436d-9086-5cd89db366c8"),
                            Name = "Rengjort badrum"
                        },
                        new
                        {
                            Id = new Guid("792e66ad-478c-48f6-bb2e-086849cbf0f8"),
                            Name = "Bytt sängkläder"
                        },
                        new
                        {
                            Id = new Guid("ace1e44f-6f5d-40d5-9178-8e9b71ed60ea"),
                            Name = "Tömt sopor"
                        },
                        new
                        {
                            Id = new Guid("e627ce1d-8dab-4581-b2df-5f305cf581cf"),
                            Name = "Tömt tvättmaskin"
                        },
                        new
                        {
                            Id = new Guid("5051dfb0-8447-4654-b931-a2cf9516998d"),
                            Name = "Startat tvättmaskin"
                        },
                        new
                        {
                            Id = new Guid("6aa00f5a-3756-4fbd-80ae-70b0e4684dcf"),
                            Name = "Tömt diskmaskin"
                        },
                        new
                        {
                            Id = new Guid("09ab5645-27ef-43f7-80b3-b9197b612dd9"),
                            Name = "Startat diskmaskin"
                        });
                });

            modelBuilder.Entity("CleaningApp.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("52785979-7ea9-49c8-a4a4-037fc01ec008"),
                            Name = "Markus"
                        },
                        new
                        {
                            Id = new Guid("b8150fea-4773-45b6-87a9-9b335c818081"),
                            Name = "Cecilia"
                        },
                        new
                        {
                            Id = new Guid("8c04a24e-f0f3-47be-949e-b2631657cddc"),
                            Name = "Planerad"
                        });
                });

            modelBuilder.Entity("CleaningApp.Domain.Entities.CleaningTask", b =>
                {
                    b.HasOne("CleaningApp.Domain.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleaningApp.Domain.Entities.TaskType", "TaskType")
                        .WithMany()
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleaningApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("TaskType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleaningApp.Domain.Entities.TaskTemplate", b =>
                {
                    b.HasOne("CleaningApp.Domain.Entities.User", "DefaultUser")
                        .WithMany()
                        .HasForeignKey("DefaultUserId");

                    b.HasOne("CleaningApp.Domain.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleaningApp.Domain.Entities.TaskType", "TaskType")
                        .WithMany()
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefaultUser");

                    b.Navigation("Room");

                    b.Navigation("TaskType");
                });
#pragma warning restore 612, 618
        }
    }
}
