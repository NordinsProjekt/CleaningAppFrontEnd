@page "/task-templates"
@using CleaningApp.Application.Dtos
@using CleaningApp.Application.Services
@using CleaningApp.Domain.Entities
@using CleaningAppFrontEnd.Components.Dropdowns
@inject TaskService TaskService
@rendermode InteractiveServer

<h3>Task Templates (Presets)</h3>

<DayOfWeekDropdown @bind-DayOfWeekValue="newTemplateDay" />

<RoomDropdown Rooms="rooms"
              @bind-SelectedRoomId="selectedRoomId" />

<TaskTypeDropdown 
    TaskTypes="taskTypes" 
    @bind-SelectedTaskTypeId="selectedTaskTypeId"/>

<UserDropdown Users="users"
              @bind-SelectedUserId="selectedUserId" />

<button @onclick="AddNewTemplate">Add Template</button>

<hr />

@if (taskTemplates == null)
{
    <p>Loading...</p>
}
else
{
    <table>
        <thead>
            <tr>
                <th>DayOfWeek</th>
                <th>Room</th>
                <th>TaskType</th>
                <th>DefaultUser</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var template in taskTemplates)
            {
                <tr>
                    <td>@((DayOfWeek)template.DayOfWeek)</td>
                    <td>@template.Room.Name</td>
                    <td>@template.TaskType.Name</td>
                    <td>@(template.DefaultUser?.Name ?? "N/A")</td>
                    <td>
                        <!-- Possibly add "Delete" or "Edit" actions here -->
                        <button @onclick="@(() => DeleteTemplate(template.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    // Collections for dropdowns
    private List<RoomDto>? rooms;
    private List<TaskTypeDto>? taskTypes;
    private List<UserDto>? users;

    // Templates already in the DB
    private IEnumerable<TaskTemplate>? taskTemplates;

    // Fields for new template
    private int newTemplateDay = 0; // Sunday by default
    private Guid selectedRoomId;
    private Guid selectedTaskTypeId;
    private Guid selectedUserId;
    private string newTemplateNotes = string.Empty;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        // Load data for dropdowns
        rooms = await TaskService.GetAllRoomsAsync();
        taskTypes = await TaskService.GetAllTaskTypesAsync();
        users = await TaskService.GetAllUsersAsync();

        // Load existing templates
        taskTemplates = await TaskService.GetAllTaskTemplatesAsync();
    }

    private async System.Threading.Tasks.Task AddNewTemplate()
    {
        // Create a new TaskTemplate (domain entity or a TaskTemplateDto)
        var newTemplate = new TaskTemplate
            {
                DayOfWeek = newTemplateDay,
                RoomId = selectedRoomId,
                TaskTypeId = selectedTaskTypeId,
                DefaultUserId = (selectedUserId == Guid.Empty) ? null : selectedUserId,
                Notes = newTemplateNotes
            };

        await TaskService.AddTaskTemplateAsync(newTemplate);

        // Reload the list
        taskTemplates = await TaskService.GetAllTaskTemplatesAsync();

        // Reset fields if you like
        newTemplateDay = 0;
        selectedRoomId = Guid.Empty;
        selectedTaskTypeId = Guid.Empty;
        selectedUserId = Guid.Empty;
        newTemplateNotes = string.Empty;

        await InvokeAsync(StateHasChanged);
    }

    private async System.Threading.Tasks.Task DeleteTemplate(Guid templateId)
    {
        // Call TaskService method
        await TaskService.DeleteTaskTemplateAsync(templateId);

        // Reload templates
        taskTemplates = await TaskService.GetAllTaskTemplatesAsync();
    }
}