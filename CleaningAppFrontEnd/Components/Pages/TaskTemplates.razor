@page "/task-templates"
@using CleaningApp.Application.Dtos
@using CleaningApp.Domain.Entities
@using CleaningApp.Application.Services
@using CleaningAppFrontEnd.Components.Dropdowns
@inject TaskService TaskService
@rendermode InteractiveServer

<h3>Task Templates</h3>

<!-- CHOOSE TaskDuration -->
<div class="mb-3">
    <label>Task Duration:</label>
    <select @bind="newTaskDuration">
        <option value="@TaskTemplateType.Week">Weekly</option>
        <option value="@TaskTemplateType.Month">Monthly</option>
        <option value="@TaskTemplateType.Quarter">Quarterly</option>
        <option value="@TaskTemplateType.Year">Yearly</option>
    </select>

    <p>Selected: @newTaskDuration</p>
</div>

<!-- Conditionally show DayOfWeek or DayOfMonth -->
@if (newTaskDuration == TaskTemplateType.Week)
{
    <DayOfWeekDropdown @bind-DayOfWeekValue="newTemplateDayOfWeek" />
}
else if (newTaskDuration == TaskTemplateType.Month)
{
    <div class="mb-3">
        <label>Day of Month (1..31):</label>
        <input type="number" @bind="newTemplateDayOfMonth" min="1" max="31" />
    </div>
}

<!-- Room & Task Type -->
<RoomDropdown Rooms="rooms" @bind-SelectedRoomId="selectedRoomId" />
<TaskTypeDropdown TaskTypes="taskTypes" @bind-SelectedTaskTypeId="selectedTaskTypeId" />

<!-- Default user (optional) -->
<UserDropdown Users="users" @bind-SelectedUserId="selectedUserId" />

<!-- Additional notes -->
<div class="mb-3">
    <label>Notes:</label>
    <textarea @bind="newTemplateNotes"></textarea>
</div>

<button class="btn btn-primary" @onclick="AddNewTemplate">Add Template</button>

<hr />

@if (taskTemplates == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Duration</th>
                <th>DaySpec</th>
                <th>Room</th>
                <th>TaskType</th>
                <th>Default User</th>
                <th>Notes</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
        @foreach (var template in taskTemplates)
        {
            <tr>
                <td>@template.TaskDuration</td>
                <td>
                    @if (template.TaskDuration == TaskTemplateType.Week)
                    {
                        @( (DayOfWeek?) template.DayOfWeek ?? DayOfWeek.Sunday)
                    }
                    else if (template.TaskDuration == TaskTemplateType.Month)
                    {
                        @template.DayOfMonth
                    }
                    else
                    {
                        <!-- etc. -->
                    }
                </td>
                <td>@template.Room?.Name</td>
                <td>@template.TaskType?.Name</td>
                <td>@(template.DefaultUser?.Name ?? "N/A")</td>
                <td>@template.Notes</td>
                <td>
                    <button class="btn btn-danger btn-sm" @onclick="@(() => DeleteTemplate(template.Id))">
                        Delete
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    // Fields for new template
    private TaskTemplateType newTaskDuration = TaskTemplateType.Week;
    private int newTemplateDayOfWeek = 0; // Sunday
    private int newTemplateDayOfMonth = 1; // For monthly
    private Guid selectedRoomId;
    private Guid selectedTaskTypeId;
    private Guid selectedUserId;
    private string newTemplateNotes = string.Empty;

    // Data
    private List<RoomDto>? rooms;
    private List<TaskTypeDto>? taskTypes;
    private List<UserDto>? users;
    private IEnumerable<TaskTemplate>? taskTemplates;

    protected override async Task OnInitializedAsync()
    {
        rooms = await TaskService.GetAllRoomsAsync();
        taskTypes = await TaskService.GetAllTaskTypesAsync();
        users = await TaskService.GetAllUsersAsync();

        taskTemplates = await TaskService.GetAllTaskTemplatesAsync();
    }

    private async Task AddNewTemplate()
    {
        var newTemplate = new TaskTemplate
        {
            Id = Guid.NewGuid(),
            TaskDuration = newTaskDuration,
            DayOfWeek = (newTaskDuration == TaskTemplateType.Week) ? newTemplateDayOfWeek : 0,
            DayOfMonth = (newTaskDuration == TaskTemplateType.Month) ? newTemplateDayOfMonth : 1,
            DefaultUserId = (selectedUserId == Guid.Empty) ? null : selectedUserId,
            RoomId = selectedRoomId,
            TaskTypeId = selectedTaskTypeId,
            Notes = newTemplateNotes
        };

        await TaskService.AddTaskTemplateAsync(newTemplate);

        // Reload
        taskTemplates = await TaskService.GetAllTaskTemplatesAsync();

        // Reset fields
        newTaskDuration = TaskTemplateType.Week;
        newTemplateDayOfWeek = 0;
        newTemplateDayOfMonth = 1;
        selectedRoomId = Guid.Empty;
        selectedTaskTypeId = Guid.Empty;
        selectedUserId = Guid.Empty;
        newTemplateNotes = string.Empty;
    }

    private async Task DeleteTemplate(Guid templateId)
    {
        await TaskService.DeleteTaskTemplateAsync(templateId);
        taskTemplates = await TaskService.GetAllTaskTemplatesAsync();
    }
}
