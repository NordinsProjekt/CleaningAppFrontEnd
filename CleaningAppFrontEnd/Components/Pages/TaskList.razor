@page "/task-list"
@using CleaningApp.Application.Dtos
@using CleaningApp.Application.Services
@inject TaskService TaskService
@rendermode InteractiveServer

<h3>Task List</h3>

<div>
    <label>User Filter:</label>
    <InputText @bind-Value="filterUser" />
    <button @onclick="LoadTasks">Apply</button>
</div>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Date</th>
            <th>Room</th>
            <th>TaskType</th>
            <th>Status</th>
            <th>Assigned User</th>
        </tr>
    </thead>
    <tbody>
        @if (tasks != null)
        {
            @foreach (var task in tasks)
            {
                <tr>
                    <td>@task.TaskDate.ToShortDateString()</td>
                    <td>@task.RoomName</td>
                    <td>@task.TaskTypeName</td>
                    <td>@task.Status</td>
                    <td>
                        @if (task.Status == CleaningApp.Domain.Entities.TaskStatus.Planning)
                        {
                            <select @onchange="@(async e => await ReassignUser(task.Id, e.Value.ToString()))">
                                <option value="">--Select user--</option>
                                @foreach (var user in allUsers)
                                {
                                    <option value="@user.Id">@user.Name</option>
                                }
                            </select>
                        }
                        else
                        {
                            @task.UserName
                        }
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    private List<CleaningTaskViewModel> tasks = new();
    private List<UserDto> allUsers = new();
    private string filterUser = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        allUsers = await TaskService.GetAllUsersAsync();
        await LoadTasks();
    }

    private async Task LoadTasks()
    {
        var allTasks = await TaskService.GetAllTasksAsync();
        tasks = allTasks
            .Where(t => string.IsNullOrEmpty(filterUser)
                        || t.UserName.Contains(filterUser, StringComparison.OrdinalIgnoreCase))
            .OrderBy(t => t.TaskDate)
            .ToList();
    }

    private async Task ReassignUser(Guid taskId, string userIdString)
    {
        if (Guid.TryParse(userIdString, out var userId))
        {
            await TaskService.ChangeUserAsync(taskId, userId);
            await LoadTasks(); // refresh
        }
    }
}
