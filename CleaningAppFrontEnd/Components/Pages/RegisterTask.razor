@page "/register-task"
@using CleaningApp.Application.Dtos;
@using CleaningApp.Application.Services;
@using CleaningApp.Domain.Entities
@using CleaningApp.Infrastructure.UnitOfWork
@rendermode InteractiveServer
@inject TaskService TaskService
@inject IUnitOfWork UnitOfWork

<h3>Register Task</h3>

<EditForm FormName="RegisterTask" EditContext="editContext" OnValidSubmit="RegisterTasks">
    <DataAnnotationsValidator />

    <div>
        <label for="userId">User</label>
        <select @bind="taskDto.UserId" class="form-control">
            <option value="">Select a User</option>
            @foreach (var user in users)
            {
                <option value="@user.Id">@user.Name</option>
            }
        </select>
    </div>

    <div>
        <label for="roomId">Room</label>
        <select @bind="taskDto.RoomId" class="form-control">
            <option value="">Select a Room</option>
            @foreach (var room in rooms)
            {
                <option value="@room.Id">@room.Name</option>
            }
        </select>
    </div>

    <div>
        <label for="taskTypeId">Task Type</label>
        <select @bind="taskDto.TaskTypeId" class="form-control">
            <option value="">Select a Task Type</option>
            @foreach (var taskType in taskTypes)
            {
                <option value="@taskType.Id">@taskType.Name</option>
            }
        </select>
    </div>

    <div>
        <label for="taskDate">Task Date</label>
        <InputDate @bind-Value="taskDto.TaskDate" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@if (!string.IsNullOrEmpty(successMessage))
{
    <p class="text-success">@successMessage</p>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger">@errorMessage</p>
}

@code {
    private TaskDto taskDto = new TaskDto();
    private EditContext editContext;
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;
    private List<UserDto> users = new();
    private List<RoomDto> rooms = new();
    private List<TaskTypeDto> taskTypes = new();

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        editContext = new EditContext(taskDto);

        users = (await UnitOfWork.Repository<User>().GetAllAsync())
            .Select(u => new UserDto { Id = u.Id, Name = u.Name }).ToList();

        rooms = (await UnitOfWork.Repository<Room>().GetAllAsync())
            .Select(r => new RoomDto { Id = r.Id, Name = r.Name }).ToList();

        taskTypes = (await UnitOfWork.Repository<TaskType>().GetAllAsync())
            .Select(tt => new TaskTypeDto { Id = tt.Id, Name = tt.Name }).ToList();
    }

    private async System.Threading.Tasks.Task RegisterTasks()
    {
        try
        {
            await TaskService.AddTaskAsync(taskDto);
            successMessage = "Task registered successfully!";
            errorMessage = string.Empty;
            taskDto = new TaskDto();
            editContext = new EditContext(taskDto); // Reset form context
        }
        catch (Exception ex)
        {
            errorMessage = "Error: " + ex.Message;
            successMessage = string.Empty;
        }
    }
}
